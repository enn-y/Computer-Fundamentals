// This file is adapted from part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * Memory of 64 registers, each 8 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[8], load, address[6];
    OUT out[8];

    PARTS:

    //For RAM64, the RAM8 CHIP is used, 8 times. 

    DMux8Way(in=load, sel=address[0..2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h); //Similar to RAM8, RAM64 follows the same code structure. Address bits 0 to 2 are chosen here, hence address 3 to 5 are chosen in the RAM8

    RAM8(in=in, load=a, address=address[3..5],out=aout); //The difference is that, RAM8 can only take in 3 Address bits, whereas RAM64 can take in 6 address bits, hence the addresses from 3 to 5 are chosen
    RAM8(in=in, load=b, address=address[3..5],out=bout);
    RAM8(in=in, load=c, address=address[3..5],out=cout);
    RAM8(in=in, load=d, address=address[3..5],out=dout);
    RAM8(in=in, load=e, address=address[3..5],out=eout);
    RAM8(in=in, load=f, address=address[3..5],out=fout);
    RAM8(in=in, load=g, address=address[3..5],out=gout);
    RAM8(in=in, load=h, address=address[3..5],out=hout);

    Mux8Way8(a=aout, b=bout, c=cout, d=dout, e=eout, f=fout, g=gout, h=hout, sel=address[0..2], out=out);
}