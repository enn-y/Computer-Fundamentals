// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // Put your code here:

    //8Way demultiplexor requires 7 demultiplexers, one input to 8 different outputs with a selector
    //The binary-tree like construction is 1-2-4, from 1 to 2 to 4

    DMux(in=in, sel=sel[2],a=aout1,b=bout1); //First demultiplexer

    DMux(in=aout1, sel=sel[1], a=aout2, b=bout2); //Following 2 demultiplexers
    DMux(in=bout1, sel=sel[1], a=cout, b=dout);

    DMux(in=aout2, sel=sel[0], a=a, b=b); //Final 4 demultiplexers to produce 8 outputs
    DMux(in=bout2, sel=sel[0], a=c, b=d);
    DMux(in=cout, sel=sel[0], a=e, b=f);
    DMux(in=dout, sel=sel[0], a=g, b=h);
}